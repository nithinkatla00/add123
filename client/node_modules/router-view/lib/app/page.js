var Addressbar, Devtools, Immutable, React, a, actions, div, pre, routes, span, test, updater;

React = require('react/addons');

Immutable = require('immutable');

test = require('../../test');

actions = require('../actions');

routes = require('../routes');

updater = require('../updater');

Devtools = React.createFactory(require('actions-recorder/lib/devtools'));

Addressbar = React.createFactory(require('../addressbar'));

a = React.createFactory('a');

div = React.createFactory('div');

pre = React.createFactory('pre');

span = React.createFactory('span');

module.exports = React.createClass({
  displayName: 'app-page',
  mixins: [React.addons.pureRenderMixin],
  propTypes: {
    store: React.PropTypes.instanceOf(Immutable.Map)
  },
  goDemo: function() {
    return actions.go({
      name: 'demo',
      data: null,
      query: {}
    });
  },
  goHome: function() {
    return actions.go({
      name: 'home',
      data: null,
      query: {}
    });
  },
  goSkip: function() {
    return actions.go({
      name: 'skip',
      data: null,
      query: {}
    });
  },
  goTeam: function() {
    return actions.go({
      name: 'team',
      data: {
        teamId: '12'
      },
      query: {}
    });
  },
  goRoom: function() {
    return actions.go({
      name: 'room',
      data: {
        teamId: '23',
        roomId: '34'
      },
      query: {}
    });
  },
  goQuery: function() {
    return actions.go({
      name: 'room',
      data: {
        teamId: '23',
        roomId: '34'
      },
      query: {
        isPrivate: 'true'
      }
    });
  },
  goChinese: function() {
    return actions.go({
      name: 'chinese',
      data: {
        name: '中文'
      },
      query: {
        '中文': '中文'
      }
    });
  },
  onPopstate: function(info, event) {
    return actions.go(info.toJS());
  },
  onTestClick: function() {
    return test.run();
  },
  renderAddress: function() {
    return Addressbar({
      route: this.props.store.get('router'),
      rules: routes,
      onPopstate: this.onPopstate,
      inHash: false
    });
  },
  renderDevtools: function() {
    return Devtools({
      records: this.props.core.records,
      pointer: this.props.core.pointer,
      isTravelling: this.props.core.isTravelling,
      updater: updater,
      store: this.props.store,
      initial: this.props.core.initial,
      width: 800,
      height: window.innerHeight
    });
  },
  renderBanner: function() {
    return div({
      className: 'bannr'
    }, div({
      className: 'heading level-2'
    }, 'Router View for React'), div({
      className: ''
    }, span(null, 'Location bar is a view! So we time travel! '), a({
      href: 'http://github.com/mvc-works/router-view'
    }, 'Read more on GitHub'), div({
      className: 'button is-attract',
      onClick: this.onTestClick
    }, 'Test')));
  },
  renderUI: function() {
    return div({
      className: 'app-ui'
    }, this.renderBanner(), this.renderAddress(), div({
      className: 'page-divider'
    }), div({
      className: 'line'
    }, div({
      className: 'button is-attract',
      onClick: this.goHome
    }, 'goHome'), div({
      className: 'button is-attract',
      onClick: this.goDemo
    }, 'goDemo'), div({
      className: 'button is-attract',
      onClick: this.goSkip
    }, 'goSkip'), div({
      className: 'button is-attract',
      onClick: this.goTeam
    }, 'goTeam'), div({
      className: 'button is-attract',
      onClick: this.goRoom
    }, 'goRoom'), div({
      className: 'button is-attract',
      onClick: this.goQuery
    }, 'goQuery'), div({
      className: 'button is-attract',
      onClick: this.goChinese
    }, 'goChinese')), div({
      className: 'line'
    }, span(null, 'Also try: '), a({
      href: '/skip/whatever/path'
    }, '/skip/whatever/path')), div({
      className: 'page-divider'
    }), div({
      className: 'line'
    }, span({
      className: 'is-bold'
    }, 'Store is:')), pre({
      className: 'page-content'
    }, JSON.stringify(this.props.store, null, 2)));
  },
  render: function() {
    return div({
      className: 'app-page'
    }, this.renderUI(), div({
      className: 'devtools-layer'
    }, this.renderDevtools()));
  }
});
