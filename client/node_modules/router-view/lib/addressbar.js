var Immutable, React, div, pathUtil;

React = require('react');

Immutable = require('immutable');

pathUtil = require('./path');

div = React.createFactory('div');

module.exports = React.createClass({
  displayName: 'addressbar',
  propTypes: {
    route: React.PropTypes.instanceOf(Immutable.Map).isRequired,
    rules: React.PropTypes.instanceOf(Immutable.List).isRequired,
    onPopstate: React.PropTypes.func.isRequired,
    inHash: React.PropTypes.bool,
    skipRendering: React.PropTypes.bool
  },
  getDefaultProps: function() {
    return {
      inHash: false,
      skipRendering: false
    };
  },
  inHash: function() {
    return this.props.inHash || (window.history == null);
  },
  componentDidMount: function() {
    if (this.inHash()) {
      return window.addEventListener('hashchange', this.onHashchange);
    } else {
      return window.addEventListener('popstate', this.onPopstate);
    }
  },
  conponentWillUnMount: function() {
    if (this.inHash()) {
      return window.removeEventListener('hashchange', this.onHashchange);
    } else {
      return window.removeEventListener('popstate', this.onPopstate);
    }
  },
  onPopstate: function(event) {
    var address, info;
    address = location.pathname + (location.search || '');
    info = pathUtil.getCurrentInfo(this.props.rules, address);
    return this.props.onPopstate(info, event);
  },
  onHashchange: function() {
    var address, info;
    if (location.hash === this._cacheRenderedHash) {
      return;
    }
    address = location.hash.substr(1);
    info = pathUtil.getCurrentInfo(this.props.rules, address);
    return this.props.onPopstate(info);
  },
  renderInHistory: function(address) {
    var oldAddress, routes;
    routes = this.props.rules;
    address = pathUtil.makeAddress(routes, this.props.route);
    if (location.search != null) {
      oldAddress = "" + location.pathname + location.search;
    } else {
      oldAddress = location.pathname;
    }
    if (oldAddress !== address && !this.props.skipRendering) {
      return history.pushState(null, null, address);
    }
  },
  renderInHash: function(address) {
    var oldAddress, routes;
    routes = this.props.rules;
    address = pathUtil.makeAddress(routes, this.props.route);
    oldAddress = location.hash.substr(1);
    if (oldAddress !== address && !this.props.skipRendering) {
      location.hash = "#" + address;
      return this._cacheRenderedHash = location.hash;
    }
  },
  render: function() {
    if ((typeof window) !== 'undefined') {
      if (this.inHash()) {
        this.renderInHash();
      } else {
        this.renderInHistory();
      }
    }
    return div({
      className: 'addressbar'
    });
  }
});
